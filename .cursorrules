# 📐 cursor-rules

## 🎯 项目背景

本项目服务对象为"银发女性"群体（50～65 岁），目标是开发一款网页端的智能美妆平台，融合"AI 肤质检测 + 产品推荐 + 美妆教学 + 社交互动"等功能，突出多模态交互、沉浸式体验与情感连接。

---

## 🧱 项目初始化

- 在项目开始时，首先仔细阅读项目目录下的 `README.md` 文件并理解其内容，包括项目的目标、功能架构、技术栈和开发计划，确保对项目整体有清晰认识。
- 如果还没有 `README.md` 文件，请主动创建一个，用于记录该应用的功能模块、页面结构、数据流、依赖库等信息。

---

## 📌 需求理解

- 充分理解用户需求，站在银发女性用户角度思考，分析需求是否存在遗漏，并与产品或策划方讨论以完善需求。
- 始终选择**最简单的解决方案**满足用户需求，避免功能堆砌和界面复杂化。

---

## ✅ 页面结构规范

### 首页（HomePage）
- 左侧：肤质检测入口（大图标按钮，显眼位置）
- 中部：今日推荐妆容卡片（展示天气、场景、推荐理由）
- 右侧：活动轮播（如"母女妆容挑战"、"广场舞美妆"）
- 底部：快捷按钮区（"我的课程"、"我的分享"）
- 全局底部：固定三大导航按钮：首页 / 课堂 / 我的

### 美妆课堂页（CoursePage）
- 顶部：语音搜索栏，支持关键词联想（如输入"户外"自动推荐"防水妆"）
- 中部：课程分类（新手入门 / 代际互动 / 高端抗老）
- 课程以卡片方式展示，附短视频预览图 + 标题

### 个人中心页（ProfilePage）
- 数据展示：
  - 肌肤年龄趋势图
  - 学习时长统计
  - 社交互动次数
- 权益入口：
  - 优雅值积分明细
  - 积分兑换历史
  - 线下沙龙报名按钮

---

## 🎨 UI 样式规范

- **文字大小**：
  - 页面标题：≥ 36px
  - 正文内容：≥ 24px
  - 按钮文字：≥ 30px
- **图标要求**：
  - 相机等主要功能按钮需使用大图标，居中或左上位置明显可点击
- **颜色对比度**：
  - 采用高对比度配色方案，背景与文字需保证清晰易读
- **布局规范**：
  - 使用响应式布局（Flex/Grid），支持移动设备优先
  - 所有页面结构需适配手机与平板尺寸

---

## 💬 交互行为规范

- 所有功能路径应控制在 3 步以内完成：
  - 如："语音搜索产品 → 推荐展示 → 一键收藏或加购"
- 删除、清空等重要操作必须二次确认
- 鼠标 hover 和点击需有视觉反馈（颜色变化 / 动效）
- 页面右上角保留"远程协助"按钮，支持子女远程协助功能入口（如屏幕共享、语音引导）

---

## 🌈 情感化体验要素

- **动态反馈**：
  - 完成任务后显示鼓励文字 + 动效（如"今日妆容超优雅！" + 花瓣动画）
- **用户昵称**：
  - 可设置个性化称谓（如"时尚奶奶"、"XX 阿姨"）
- **纪念日提示**：
  - 注册后 100 天展示提示卡片，如"加入我们第 100 天啦～"

---

## 📊 数据可视化规范

- 所有图表（折线图 / 柱状图）采用清晰色块和粗线条，适老化设计
- 图表文字大小不得低于 20px
- 图表配说明文字，位置紧邻图表区域下方或右侧

---

## 🔌 模块/组件规范（建议命名）

- `BottomNav`：底部导航栏（固定在屏幕底部）
- `CameraButton`：肤质检测入口图标
- `RecommendCard`：妆容推荐卡片
- `ActivityCarousel`：活动轮播图组件
- `CourseCard`：课堂视频卡片
- `StatsChart`：学习/互动数据统计图表
- `SkinChart`：肤质变化趋势图
- `ConfirmModal`：操作确认弹窗
- `RemoteHelpButton`：远程协助入口按钮
- `AnniversaryCard`：纪念日提示卡片

---

## 🧪 Mock & 状态管理建议

- 所有页面应支持 Mock 数据状态（检测结果、推荐内容、积分信息）
- 使用 `zustand` 或 `recoil` 进行用户状态管理
- 推荐组件在加载数据时使用骨架屏（Skeleton UI）

---

## 💻 编码规范

- 强调代码的 **清晰性、模块化、可维护性**，遵循最佳实践（如 DRY 原则、最小权限原则）。
- 编写安全代码，避免引入漏洞，确保用户输入被妥善处理。
- 持续进行性能优化，减少资源占用，提升加载速度，确保项目高效运行。
- 编写必要的单元测试，确保关键功能的健壮性。
- 所有组件和函数必须提供清晰、准确的**中文注释**，并补充相关文档说明。

---

## 🛠️ 问题解决

- 阅读项目相关代码，理解网页前端的整体运行结构与组件交互关系。
- 根据用户体验反馈或测试结果分析问题根源，提出可行的修复思路。
- 每次提交应尽量保持变更范围最小，避免影响现有功能。

---

## 🔁 迭代优化

- 与用户或设计方保持密切沟通，根据使用反馈不断优化 UI 和交互细节。
- 需求不明确时，及时向产品负责人提问，澄清功能目标与交互逻辑。
- 每次迭代更新后及时修订 `README.md` 文件，说明新特性或优化点，保持文档同步。

---

## 🧠 方法论

- **系统 2 思维**：以严密逻辑拆解需求，将问题拆分为小模块并进行结构化解决。
- **思维树模型**：在面对技术选择或设计方案时，列举可能路径，评估优劣，择优执行。
- **迭代改进**：在初版功能完成后，主动识别潜在的边界场景、交互障碍与性能瓶颈，逐轮打磨，确保功能体验和稳定性都达标。

---

## 📋 项目模块结构分析

### 1. 核心页面

- 首页 (HomePage)

- 美妆课堂页 (CoursePage)

- 个人中心页 (ProfilePage)

### 2. 基础组件

- 底部导航栏 (BottomNav)

- 远程协助按钮 (RemoteHelpButton)

- 确认弹窗 (ConfirmModal)

### 3. 功能组件

- 肤质检测入口 (CameraButton)

- 推荐卡片 (RecommendCard)

- 活动轮播 (ActivityCarousel)

- 课程卡片 (CourseCard)

- 数据统计图表 (StatsChart)

- 肤质趋势图 (SkinChart)

- 纪念日提示卡片 (AnniversaryCard)

---

## 📝 开发任务清单（按优先级排序）

### 第一阶段：基础框架搭建

1. 项目初始化与配置

- 创建项目基础结构

- 配置必要的依赖（React、TypeScript、样式库等）

- 设置路由系统

1. 基础组件开发

- BottomNav（底部导航栏）

- RemoteHelpButton（远程协助按钮）

- ConfirmModal（确认弹窗）

### 第二阶段：首页开发

1. 首页布局框架

- 页面整体布局

- 响应式设计实现

1. 首页功能组件

- CameraButton（肤质检测入口）

- RecommendCard（推荐卡片）

- ActivityCarousel（活动轮播）

### 第三阶段：课堂页面开发

1. 课堂页面布局

- 页面整体布局

- 语音搜索栏

1. 课堂功能组件

- CourseCard（课程卡片）

- 课程分类导航

### 第四阶段：个人中心开发

1. 个人中心布局

- 页面整体布局

- 数据展示区域

1. 个人中心功能组件

- StatsChart（学习统计图表）

- SkinChart（肤质趋势图）

- AnniversaryCard（纪念日提示）

### 第五阶段：状态管理与优化

1. 状态管理实现

- 用户状态管理

- 数据持久化

1. 性能优化与测试

- 性能优化

- 单元测试

- 兼容性测试

## 🚀 开发建议

1. 每个模块开发时，建议遵循以下步骤：

- 先完成基础布局

- 实现核心功能

- 添加交互效果

- 进行样式优化

- 编写测试用例

1. 每个模块完成后，建议：

- 进行代码审查

- 确保符合项目规范

- 更新项目文档

## 📂 项目结构规范

### 目录结构
```
beauty-platform/
├── src/
│   ├── app/                      # Next.js 应用页面
│   │   ├── layout.tsx           # 根布局
│   │   ├── page.tsx             # 首页
│   │   ├── course/              # 美妆课堂
│   │   │   └── page.tsx
│   │   └── profile/             # 个人中心
│   │       └── page.tsx
│   │
│   ├── components/              # 组件目录
│   │   ├── layout/             # 布局组件
│   │   │   ├── RootLayout.tsx
│   │   │   └── PageHeader.tsx
│   │   │
│   │   ├── common/             # 通用组件
│   │   │   ├── BottomNav.tsx
│   │   │   ├── RemoteHelpButton.tsx
│   │   │   ├── ConfirmModal.tsx
│   │   │   └── LoadingSkeleton.tsx
│   │   │
│   │   ├── home/               # 首页组件
│   │   │   ├── CameraButton.tsx
│   │   │   ├── RecommendCard.tsx
│   │   │   └── ActivityCarousel.tsx
│   │   │
│   │   ├── course/             # 课堂页面组件
│   │   │   ├── CourseCard.tsx
│   │   │   ├── CategoryNav.tsx
│   │   │   └── VoiceSearch.tsx
│   │   │
│   │   └── profile/            # 个人中心组件
│   │       ├── UserInfo.tsx
│   │       ├── StatsChart.tsx
│   │       ├── SkinChart.tsx
│   │       └── AnniversaryCard.tsx
│   │
│   ├── hooks/                  # 自定义 Hooks
│   │   ├── useAuth.ts
│   │   ├── useSkinAnalysis.ts
│   │   └── useVoiceInput.ts
│   │
│   ├── store/                  # 状态管理
│   │   ├── userStore.ts       # 用户信息
│   │   ├── courseStore.ts     # 课程数据
│   │   └── skinStore.ts       # 肤质数据
│   │
│   ├── services/              # API 服务
│   │   ├── api.ts            # API 配置
│   │   ├── skinAnalysis.ts   # 肤质分析
│   │   ├── courseService.ts  # 课程服务
│   │   └── userService.ts    # 用户服务
│   │
│   ├── styles/               # 样式文件
│   │   ├── globals.css      # 全局样式
│   │   └── theme.ts         # 主题配置
│   │
│   ├── types/               # TypeScript 类型定义
│   │   ├── user.ts
│   │   ├── course.ts
│   │   └── skin.ts
│   │
│   └── utils/              # 工具函数
│       ├── format.ts      # 格式化工具
│       ├── validation.ts  # 验证工具
│       └── analytics.ts   # 数据分析工具
│
├── public/                # 静态资源
│   ├── images/           # 图片资源
│   └── icons/           # 图标资源
│
└── tests/                # 测试文件
    ├── unit/            # 单元测试
    └── integration/     # 集成测试
```

### 开发规范

1. **组件开发规范**
   - 组件必须放在对应的功能目录下
   - 每个组件必须包含完整的中文注释
   - 组件必须遵循适老化设计原则
   - 复杂组件需要编写单元测试

2. **状态管理规范**
   - 使用 zustand 进行状态管理
   - 按功能模块拆分 store
   - 避免状态冗余和重复

3. **样式开发规范**
   - 使用 Tailwind CSS 进行样式开发
   - 遵循项目预设的设计标准
   - 确保样式的响应式表现

4. **类型定义规范**
   - 所有类型定义放在 types 目录下
   - 按领域模型划分类型文件
   - 导出类型时使用 type 关键字

5. **测试规范**
   - 核心功能必须编写单元测试
   - 页面交互流程需要集成测试
   - 测试覆盖率要求达到 80%

### 文件命名规范

1. **组件文件**
   - 使用大驼峰命名法
   - 以功能名称开头
   - 例如：`CameraButton.tsx`, `UserProfile.tsx`

2. **工具函数文件**
   - 使用小驼峰命名法
   - 以功能描述命名
   - 例如：`formatDate.ts`, `validateInput.ts`

3. **类型定义文件**
   - 使用小驼峰命名法
   - 以模块名称命名
   - 例如：`user.ts`, `course.ts`

4. **样式文件**
   - 使用小驼峰命名法
   - 以模块名称命名
   - 例如：`theme.ts`, `globals.css`

