# 美妆平台社区模块前端开发清单 (Next.js - 借助 Cursor)

## 阶段一：项目设置与基础结构

- [x] **完善 TypeScript 配置 (`tsconfig.json`)**:
    - 确保路径别名 (`paths`) 设置正确，例如 `@/components/*`, `@/hooks/*` 等，方便导入。
    - 启用严格模式 (`strict: true`) 以获得更好的类型检查。
- [x] **配置 ESLint 和 Prettier (`eslint.config.mjs`, `.prettierrc`)**:
    - 确保代码风格检查和格式化工具配置完毕并能协同工作。
- [x] **设置全局样式和主题 (`src/app/globals.css`, `src/styles/theme.ts`)**:
    - 定义基础的全局样式。
    - 使用 Tailwind CSS 进行样式管理。
- [x] **创建核心布局组件 (`src/components/layout/`)**:
    - `MainLayout.tsx`: 包含导航栏、页脚等通用布局结构。
    - `Navbar.tsx`: 导航栏组件。
    - `Footer.tsx`: 页脚组件。
    - 在根 `src/app/layout.tsx` 中集成 `MainLayout`。
- [x] **API 请求工具配置 (`src/utils/apiClient.ts`)**:
    - 使用 Axios 创建 API 请求客户端实例。
    - 设置基础 URL、请求头、错误处理逻辑。
    - 实现 Token 认证和请求拦截器。
- [x] **状态管理初始化 (`src/store/`)**:
    - 使用 Zustand 创建用户认证状态管理。
    - 实现用户信息、token、登录状态等管理。

## 阶段二：用户认证模块

- [x] **创建 TypeScript 类型定义 (`src/types/auth.ts`)**:
    - 定义用户认证相关的接口和类型。
- [x] **登录页面 (`src/app/auth/login/page.tsx`)**:
    - 创建登录表单组件。
    - 实现表单验证和提交逻辑。
- [x] **注册页面 (`src/app/auth/register/page.tsx`)**:
    - 创建注册表单组件。
    - 实现表单验证和提交逻辑。
- [x] **实现认证状态同步和路由保护**:
    - 创建 `useAuth` Hook 管理认证状态。
    - 实现路由保护逻辑。

## 阶段三：社区核心功能 - 帖子

- [x] **创建帖子相关 TypeScript 类型 (`src/types/post.ts`)**:
    - 定义 `Post`, `Comment`, `Author` 等接口。
- [x] **帖子列表页面 (`src/app/community/page.tsx`)**:
    - 实现帖子列表展示。
    - 添加话题分类和筛选功能。
    - 集成发帖、点赞、收藏、评论等交互功能。
- [x] **帖子详情页面 (`src/app/community/posts/[postId]/page.tsx`)**:
    - 展示完整的帖子内容和评论。
    - 实现点赞、收藏、评论等交互功能。
- [x] **创建帖子页面 (`src/app/community/posts/create/page.tsx`)**:
    - 创建发帖表单组件。
    - 实现图片上传和内容发布功能。
- [x] **点赞/收藏功能**:
    - 实现帖子的点赞和收藏功能。
    - 添加相应的状态管理和 UI 反馈。
- [x] **评论功能**:
    - 实现评论的发布、展示和点赞功能。
    - 添加评论列表的分页加载。

## 阶段四：个人中心与其他页面

- [x] **个人中心页面 (`src/app/profile/[userId]/page.tsx`)**:
    - 展示用户信息和发布的帖子。
    - 实现个人信息编辑功能。
- [ ] **分类浏览页面 (`src/app/community/categories/[categoryId]/page.tsx`)**:
    - 获取并展示特定分类下的帖子列表。

## 阶段五：测试与优化

- [ ] **组件单元测试 (Jest, React Testing Library)**:
    - 为核心组件编写测试用例。
- [ ] **端到端测试 (Cypress, Playwright)**:
    - 测试核心用户流程。
- [ ] **性能优化**:
    - 图片优化 (Next/Image 组件)。
    - 代码分割和懒加载。
    - 减少不必要的重新渲染。

## 开发日志

### 2024-03-21
1. 完成项目基础架构搭建
   - 配置 TypeScript、ESLint、Prettier
   - 设置 Tailwind CSS 主题和全局样式
   - 创建核心布局组件

2. 实现用户认证模块
   - 创建认证相关的类型定义
   - 实现登录和注册功能
   - 添加路由保护机制

3. 开发社区核心功能
   - 创建帖子相关的类型定义和 API 服务
   - 实现帖子列表页面，支持话题分类和筛选
   - 开发发帖功能，支持图片上传
   - 实现点赞、收藏、评论等交互功能
   - 完成个人中心页面开发

4. Bug 修复
   - 修复 apiClient 导出方式不匹配的问题
   - 统一使用命名导出方式，确保模块导入的一致性
   - 修复 RemoteHelpButton 组件的导出/导入问题
   - 解决社区页面图片上传大小限制问题（配置 serverActions.bodySizeLimit）
   - 修复 RemoteHelpButton 组件的导入方式，统一使用默认导入

### 2024-03-22
1. 实现分类浏览功能
   - 添加分类相关的类型定义（Category, CategoryPostsResponse）
   - 创建分类浏览页面（/community/categories/[categoryId]）
   - 实现分类帖子的加载和分页功能
   - 添加分类信息展示和帖子列表展示

2. 开始后端开发
   - 创建 Django 项目和应用
   - 配置项目设置（settings.py）
   - 创建自定义用户模型（User）
   - 创建社区模块模型（Category, Post, Comment）
   - 实现用户认证 API
     - 创建用户序列化器（注册、登录、用户信息）
     - 实现用户视图（注册、登录、个人信息）
     - 配置认证相关的 URL 路由
     - 集成 JWT 认证机制

3. 实现前端用户认证
   - 创建用户认证相关的类型定义
   - 实现认证服务和状态管理
   - 创建登录页面（/auth/login）
   - 创建注册页面（/auth/register）
   - 更新个人中心页面，添加登录/注册入口
   - 实现用户信息的展示和退出登录功能

### 待办事项
1. 后端开发
   - 实现帖子相关 API
   - 实现评论相关 API
   - 实现分类相关 API
   - 添加数据验证和权限控制
   - 实现文件上传功能

2. 前端优化
   - 添加单元测试和端到端测试
   - 进行性能优化
   - 完善错误处理和加载状态
   - 添加更多的用户反馈和动画效果